{
  "name": "libclo",
  "tagline": "Compound literal JSON objects",
  "body": "# libclo\r\n\r\nCompound literal JSON objects\r\n\r\n## Description\r\n\r\nlibclo is a C library with the single purpose of emitting serialized JSON structures in a high performance environment, while correctly handling escaping, control characters and UTF-8 encoding. This can be useful for example when using JSON for log formats, or when building RESTful services.\r\n\r\nIt does this by constructing the JSON structures as compound literals, which does not require any runtime memory allocation or system calls.\r\n\r\n## Performance\r\n\r\n[Simple JSON serialization benchmark](https://github.com/fredrikwidlund/libclo_benchmark)\r\n\r\n| Library | Performance | Factor |\r\n| --- | --- | --- |\r\n| libclo | 378.94 ns | 1.0x |\r\n| jansson | 2463.8 ns | 6.5x |\r\n| cJSON | 1693.1 ns | 4.5x |\r\n\r\nlibclo is a small subset though of the functionality in cJSON, and even more so of the functionality in jansson.\r\n\r\n## Installation\r\n```\r\n$ git clone https://github.com/fredrikwidlund/libclo.git\r\n$ cd libclo\r\n$ ./autogen.sh\r\n$ ./configure\r\n$ make install\r\n```\r\n\r\n## Test\r\nTests require 100% code coverage to succeed.\r\n\r\n```\r\n$ make check\r\n[...]\r\n$ cat test/coverage.sh.log \r\n[clo]\r\nFile 'src/clo.c'\r\nLines executed:100.00% of 95\r\nBranches executed:100.00% of 50\r\nTaken at least once:100.00% of 50\r\nCalls executed:100.00% of 28\r\nPASS test/coverage.sh (exit status: 0)\r\n```\r\n\r\n## Usage\r\n\r\n### Hello world\r\n```c\r\n$ cat hello.c\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <stdint.h>\r\n#include <clo.h>\r\n\r\nint main()\r\n{\r\n  char string[256];\r\n  clo_encode((clo[]){clo_object({\"hello\", clo_string(\"world\")})}, string, sizeof string);\r\n  puts(string);\r\n}\r\n$ gcc -Wall -o hello hello.c -lclo\r\n$ ./hello\r\n{\"hello\":\"world\"}\r\n```\r\n\r\n### JSON types\r\n\r\n```c\r\n$ cat types.c\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <stdint.h>\r\n#include <clo.h>\r\n\r\nint main()\r\n{\r\n  char buffer[256];\r\n\r\n  clo string = clo_string(\"unicode snowman - \\xE2\\x98\\x83\");\r\n  clo real = clo_real(3.14);\r\n  clo integer = clo_integer(42);\r\n  clo true = clo_true();\r\n  clo false = clo_false();\r\n  clo null = clo_null();\r\n\r\n  clo array = clo_array(string, real, integer, true, false, null);\r\n  clo_encode(&array, buffer, sizeof buffer);\r\n  puts(buffer);\r\n\r\n  clo object = clo_object\r\n    ({\"string\", string},\r\n     {\"real\", real},\r\n     {\"integer\", integer},\r\n     {\"true\", true},\r\n     {\"false\", false},\r\n     {\"null\", null},\r\n     {\"array\", array},\r\n     {\"nested object\", clo_object({\"object\", clo_object({\"inner\", clo_true()})})});\r\n  clo_encode(&object, buffer, sizeof buffer);\r\n  puts(buffer);\r\n}\r\n$ gcc -Wall -o types types.c -lclo\r\n$ ./types \r\n[\"unicode snowman - ☃\",3.14,42,true,false,null]\r\n{\"string\":\"unicode snowman - ☃\",\"real\":3.14,\"integer\":42,\"true\":true,\"false\":false,\"null\":null,\"array\":[\"unicode snowman - ☃\",3.14,42,true,false,null],\"nested object\":{\"object\":{\"inner\":true}}}\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}